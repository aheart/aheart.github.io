var searchIndex = {};
searchIndex["molecule_parser"] = {"doc":"","items":[[5,"main","molecule_parser","",null,{"inputs":[],"output":null}],[0,"lexer","","",null,null],[4,"Token","molecule_parser::lexer","Molecule syntax tokens recognizable by our Lexer",null,null],[13,"Bracket","","",0,null],[13,"Atom","","",0,null],[13,"Index","","",0,null],[5,"lex","","Lex a string slice into a Vector of Tokens",null,{"inputs":[{"name":"str"}],"output":{"generics":["vec","string"],"name":"result"}}],[5,"lex_atom","","Lex an atom",null,{"inputs":[{"name":"char"},{"name":"peekable"}],"output":{"name":"string"}}],[5,"lex_index","","Lex atom index",null,{"inputs":[{"name":"char"},{"name":"peekable"}],"output":{"name":"usize"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[0,"model","molecule_parser","",null,null],[5,"add_atoms","molecule_parser::model","Increase the index by a number add_atoms((H, 2), 1) -> (H, 3)",null,{"inputs":[{"name":"atom"},{"name":"usize"}],"output":{"name":"atom"}}],[5,"mul_atoms","","Multiply the index by a number mul_atoms((H, 2), 2) -> (H, 4)",null,{"inputs":[{"name":"atom"},{"name":"usize"}],"output":{"name":"atom"}}],[5,"mul_molecule","","Multiply the indices of all atoms in a vector of Atoms (Molecule)",null,{"inputs":[{"name":"molecule"},{"name":"usize"}],"output":{"name":"molecule"}}],[6,"Atom","","",null,null],[6,"Molecule","","",null,null],[0,"parser","molecule_parser","",null,null],[3,"ParseNode","molecule_parser::parser","Tree structure that represents a molecule",null,null],[12,"children","","",1,null],[12,"entry","","",1,null],[4,"Grammar","","Grammar nodes supported by our syntax tree",null,null],[13,"Atom","","",2,null],[13,"Index","","",2,null],[5,"merge_atoms","","After flattening the tree we can end up with a result similar to this [(\"K\", 4), (\"O\", 2), (\"N\", 2), (\"S\", 4), (\"O\", 12)] where oxygen has two entries",null,{"inputs":[{"name":"molecule"}],"output":{"name":"molecule"}}],[5,"parse_atoms","","Build a ParseNode tree from tokens",null,null],[5,"parse_atom","","Parse exactly one atom and its index (if present)",null,null],[5,"parse_group","","Parse a group of atoms that start with an opening bracket and end with either a closing bracket or with an index after the closing bracket",null,null],[5,"parse_open_bracket","","Parse an opening bracket for a group of atoms or returns an error.",null,null],[5,"parse_close_bracket","","Parse a closing bracket for a group of atoms or returns an error.",null,null],[5,"matching","","Find matching bracket",null,{"inputs":[{"name":"char"}],"output":{"name":"char"}}],[5,"parse_index","","Parse the index of an atom or a group of atoms.",null,null],[5,"parse_molecule","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["molecule","string"],"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"grammar"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"parsenode"}}],[11,"new","","",1,{"inputs":[{"generics":["parsenode"],"name":"vec"},{"name":"grammar"}],"output":{"name":"parsenode"}}],[11,"flatten","","Convert the structure into a vector of Atoms (Molecule)",1,{"inputs":[{"name":"self"}],"output":{"name":"molecule"}}]],"paths":[[4,"Token"],[3,"ParseNode"],[4,"Grammar"]]};
initSearch(searchIndex);
